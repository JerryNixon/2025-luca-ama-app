"""
Django settings for ama_backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-p9s89r&2dh=pjh__h7#1tj&ln9ulrpc3(fh@ln1i@71-xl8h%f')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',        # Django REST Framework
    'rest_framework_simplejwt',  # JWT Authentication
    'corsheaders',          # CORS headers for frontend communication
    'api',                  # Your AMA API app
]

AUTH_USER_MODEL = 'api.User'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware (must be first)
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ama_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ama_backend.wsgi.application'


# Microsoft Fabric SQL Database Configuration
# This project uses Microsoft Fabric SQL Database exclusively
print("ðŸ”— Configuring Microsoft Fabric SQL Database connection...")

# Get authentication method from environment
auth_method = os.getenv('AUTH_METHOD', 'ActiveDirectoryIntegrated')
print(f"ðŸ“¡ Using authentication method: {auth_method}")

# Build connection string based on authentication method
if auth_method == 'ActiveDirectoryInteractive':
    # Opens a browser/dialog for Azure AD login (first time)
    extra_params = 'Authentication=ActiveDirectoryInteractive;Encrypt=yes;TrustServerCertificate=no;ConnectTimeout=30;Command Timeout=60'
elif auth_method == 'ActiveDirectoryDefault':
    # Uses cached Azure AD credentials (after first login)
    extra_params = 'Authentication=ActiveDirectoryDefault;Encrypt=yes;TrustServerCertificate=no;ConnectTimeout=30;Command Timeout=60'
elif auth_method == 'ActiveDirectoryIntegrated':
    # Uses Azure AD integrated authentication (not Windows integrated)
    extra_params = 'Authentication=ActiveDirectoryIntegrated;Encrypt=yes;TrustServerCertificate=no;ConnectTimeout=30;Command Timeout=60'
else:
    # Fallback without specific authentication (let SQL Server handle it)
    extra_params = 'Encrypt=yes;TrustServerCertificate=no;ConnectTimeout=30;Command Timeout=60'

DATABASES = {
    'default': {
        'ENGINE': 'mssql',
        'NAME': os.getenv('DB_NAME'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '1433'),
        'USER': os.getenv('DB_USER'),  # Use the actual user from .env
        'PASSWORD': os.getenv('DB_PASSWORD', ''),  # Empty for Azure AD auth
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',
            'extra_params': extra_params
        },
    }
}

print(f"Database: {DATABASES['default']['NAME']}")
print(f"Host: {DATABASES['default']['HOST']}")
print(f"User: {DATABASES['default']['USER'] or 'Integrated Auth'}")
print(f"Auth: {auth_method}")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Configuration - Allow frontend to communicate with backend
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # Next.js default port
    'http://127.0.0.1:3000',  # Alternative localhost
    'http://localhost:3001',  # Alternative port
    'http://127.0.0.1:3001',  # Alternative port
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Security: only allow specific origins

# Additional CORS headers for authentication
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# JWT Configuration
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
}